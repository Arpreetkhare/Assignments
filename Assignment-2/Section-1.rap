Snippet 1:  
public class Main { 
    public void main(String[] args) { 
        System.out.println("Hello, World!"); 
    } 
} 
 What error do you get when running this code?

Error: main method not find 
Reason: in java main method must be public static so 
         JVM can invoke without creating an instance of the class.
Correct code:

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


----------------------------------------------------------------------------------------------------------------


Snippet 2:  
public class Main { 
    static void main(String[] args) { 
        System.out.println("Hello, World!"); 
    } 
} 
 What happens when you compile and run this code? 

Error:main method not find
Reason : in java main method must be public static so 
        JVM can invoke without creating an instance of the class.
Correct code :

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


----------------------------------------------------------------------------------------------------------------


Snippet 3:  
public class Main { 
    public static int main(String[] args) { 
        System.out.println("Hello, World!"); 
        return 0; 
    }
} 

 What error do you encounter? Why is void used in the main method? 

Error : its a void method so it will only return void
        "Main method must return void"

Correct code :

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


----------------------------------------------------------------------------------------------------------------


Snippet 4:  
public class Main { 
    public static void main() { 
        System.out.println("Hello, World!"); 
    } 
} 
 What happens when you compile and run this code? Why is String[] args needed? 

Error : Main method not found in class Main
Reason : JVM needs to know how many arguments are passed to the main method so it can invoke.
Correct code :

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}

 
----------------------------------------------------------------------------------------------------------------



Snippet 5:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Main method with String[] args"); 
    } 
    public static void main(int[] args) { 
        System.out.println("Overloaded main method with int[] args"); 
    } 
} 
 Can you have multiple main methods? What do you observe? 

:==> it will not throw any errors because java allowed method overloading.



----------------------------------------------------------------------------------------------------------------



Snippet 6:  
public class Main { 
    public static void main(String[] args) { 
        int x = y + 10; 
        System.out.println(x); 
    } 
} 
 What error occurs? Why must variables be declared? 

Error : there is no variable y present.
Correct code :

public class Main {
    public static void main(String[] args) {
        int y = 5;
        int x = y + 10;
        System.out.println(x);
    }
}

----------------------------------------------------------------------------------------------------------------



Snippet 7:  
public class Main { 
    public static void main(String[] args) { 
        int x = "Hello"; 
        System.out.println(x); 
    } 
} 
 What compilation error do you see? Why does Java enforce type safety? 

Error:int cannot be assigned to string

Correct code : 

public class Main {
    public static void main(String[] args) {
        int y = 5;
        int x = y + 10;
        System.out.println(x);
    }
}


----------------------------------------------------------------------------------------------------------------

 
Snippet 8:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World!")
    } 
} 
 What syntax errors are present? How do they affect compilation? 

Error : there is no ";" after print statement!
Correct code :

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


----------------------------------------------------------------------------------------------------------------


Snippet 9:  
public class Main { 
    public static void main(String[] args) { 
        int class = 10; 
        System.out.println(class); 
    } 
} 
 What error occurs? Why can't reserved keywords be used as identifiers? 


Error: reserved keyword.
Reason: class is a reserved keyword in Java and cannot be used as a variable name.
Correct code :

public class Main {
    public static void main(String[] args) {
        int myClass = 10;
        System.out.println(myClass);
    }
}


----------------------------------------------------------------------------------------------------------------


 
Snippet 10:  
public class Main { 
    public void display() { 
        System.out.println("No parameters"); 
    } 
    public void display(int num) { 
        System.out.println("With parameter: " + num); 
    } 
    public static void main(String[] args) { 
        display(); 
        display(5); 
    } 
} 
 What happens when you compile and run this code? Is method overloading allowed? 
Error: None static method
Reason: The display() method is not static, so it cannot be called from the main() method.
Correct code :

public class Main {
    public void display() {
        System.out.println("No parameters");
    }
    public void display(int num) {
        System.out.println("With parameter: " + num);
    }
    public static void main(String[] args) {
        Main obj = new Main();
        obj.display();
        obj.display(5);
    }
}



----------------------------------------------------------------------------------------------------------------

Snippet 11:  
public class Main { 
    public static void main(String[] args) { 
        int[] arr = {1, 2, 3}; 
        System.out.println(arr[5]); 
    } 
} 
 What runtime exception do you encounter? Why does it occur? 
Error : index out of range.
Reason: The array index starts from 0, so the maximum index for the array is 2.

Correct code :

public class Main {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        System.out.println(arr[2]); // Accessing a valid index
    }
}


----------------------------------------------------------------------------------------------------------------
 
 
Snippet 12:  
public class Main { 
    public static void main(String[] args) { 
        while (true) { 
            System.out.println("Infinite Loop"); 
        } 
    } 
} 
 What happens when you run this code? How can you avoid infinite loops? 

Error : infinite loop! "need a condition or variables!"
Reason: The while loop condition is always true, so the loop will continue indefinitely.

Correct code :

public class Main {
    public static void main(String[] args) {
        int counter = 0;
        while (counter < 5) {
            System.out.println("Loop iteration " + counter);
            counter++;
        }
    }
}


Snippet 13:  
public class Main { 
    public static void main(String[] args) { 
        String str = null; 
        System.out.println(str.length()); 
    } 
} 
 What exception is thrown? Why does it occur? 

Error : NullPointerException!
Reason: The string is null, so calling the length() method on it will throw a NullPointerException.
Correct code : 

public class Main {
    public static void main(String[] args) {
        String str = "Hello";
        System.out.println(str.length());
    }
}

Snippet 14:  
public class Main { 
    public static void main(String[] args) { 
        double num = "Hello"; 
        System.out.println(num); 
    } 
} 
 What compilation error occurs? Why does Java enforce data type constraints? 
Error: Wrong data type ,  types: String cannot be converted to double.
Reason: Java enforces data type constraints.
 

----------------------------------------------------------------------------------------------------------------



Snippet 15:  
public class Main { 
    public static void main(String[] args) { 
        int num1 = 10; 
        double num2 = 5.5; 
        int result = num1 + num2; 
        System.out.println(result); 
    } 
} 
 What error occurs when compiling this code? How should you handle different data types 
in operations? 

Error: incompatiable data type!
Reason: The data types of the variables are different, so you can't directly add them together.

Correct code :

public class Main {
    public static void main(String[] args) {
        int num1 = 10;
        double num2 = 5.5;
        int result = (int) (num1 + num2);
        System.out.println(result);
    }
}

----------------------------------------------------------------------------------------------------------------

 
Snippet 16:  
public class Main { 
    public static void main(String[] args) { 
        int num = 10; 
        double result = num / 4; 
        System.out.println(result); 
    } 
} 
 What is the result of this operation? Is the output what you expected? 

output: 2.0


----------------------------------------------------------------------------------------------------------------


Snippet 17:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 5; 
        int result = a ** b; 
        System.out.println(result); 
    } 
} 
 What compilation error occurs? Why is the ** operator not valid in Java? 

Error: bad operand types!
Reason: unlike python java use "Math.pow()"! 
Correct code :

public class Main {
    public static void main(String[] args) {
        int a = 10;
        int b = 5;
        double result = Math.pow(a, b);
        System.out.println(result);
    }
}



----------------------------------------------------------------------------------------------------------------


Snippet 18:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 5; 
        int result = a + b * 2; 
        System.out.println(result); 
    } 
} 
 What is the output of this code? How does operator precedence affect the result? 

Output: 20
Reason : precedence rule !




----------------------------------------------------------------------------------------------------------------



Snippet 19:  
public class Main { 
    public static void main(String[] args) { 
        int a = 10; 
        int b = 0; 
        int result = a / b; 
        System.out.println(result); 
    } 
} 
 What runtime exception is thrown? Why does division by zero cause an issue in Java? 

Reason: Division by zero is undefined. 

Modified code : 

public class Main {
    public static void main(String[] args) {
        int a = 10;
        int b = 0;
        if (b != 0) {
            System.out.println(a / b);
        } else {
            System.out.println("Division by zero not allowed.");
        }
    }
}


----------------------------------------------------------------------------------------------------------------

 
Snippet 20:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World") 
    } 
} 
 What syntax error occurs? How does the missing semicolon affect compilation? 

Error: ';' expected
Reason: The semicolon is missing at the end of the println statement. The compiler expects a sem
Correct code : 

public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}


----------------------------------------------------------------------------------------------------------------



Snippet 21:  
public class Main { 
    public static void main(String[] args) { 
        System.out.println("Hello, World!"); 
    }
    // Missing closing brace here 
} 
 What does the compiler say about mismatched braces? 
Error : as from comment saying there is missing closing brace!


----------------------------------------------------------------------------------------------------------------



Snippet 22:  
public class Main { 
    public static void main(String[] args) { 
        static void displayMessage() { 
            System.out.println("Message"); 
        } 
    } 
} 
 What syntax error occurs? Can a method be declared inside another method? 


----------------------------------------------------------------------------------------------------------------



Snippet 23:  
public class Confusion { 
    public static void main(String[] args) { 
        int value = 2; 
        switch(value) { 
            case 1: 
                System.out.println("Value is 1"); 
            case 2: 
                System.out.println("Value is 2"); 
            case 3: 
                System.out.println("Value is 3"); 
            default: 
                System.out.println("Default case"); 
        } 
    } 
} 
 Error to Investigate: Why does the default case print after "Value is 2"? How can you prevent 
the program from executing the default case? 

Reason: Missing break statement after each case.
Correct code :

public class Confusion {
    public static void main(String[] args) {
        int value = 2;
        switch(value) {
            case 1:
                System.out.println("Value is 1");
                break;
            case 2:
                System.out.println("Value is 2");
                break;
            case 3:
                System.out.println("Value is 3");
                break;
            default:
                System.out.println("Default case");
        }
    }
}

 

----------------------------------------------------------------------------------------------------------------


 
Snippet 24:  
public class MissingBreakCase { 
    public static void main(String[] args) { 
        int level = 1; 
        switch(level) { 
            case 1: 
                System.out.println("Level 1"); 
            case 2: 
                System.out.println("Level 2"); 
            case 3: 
                System.out.println("Level 3"); 
            default: 
                System.out.println("Unknown level"); 
        } 
    } 
} 
 Error to Investigate: When level is 1, why does it print "Level 1", "Level 2", "Level 3", and 
"Unknown level"? What is the role of the break statement in this situation? 

Reason: Missing break statement after each case.

Correct code :

public class MissingBreakCase {
    public static void main(String[] args) {
        int level = 1;
        switch(level) {
            case 1:
                System.out.println("Level 1");
                break;
            case 2:
                System.out.println("Level 2");
                break;
            case 3:
                System.out.println("Level 3");
                break;
            default:
                System.out.println("Unknown level");
        }
    }
}


----------------------------------------------------------------------------------------------------------------



Snippet 25:  
public class Switch { 
    public static void main(String[] args) { 
        double score = 85.0; 
        switch(score) { 
            case 100: 
                System.out.println("Perfect score!"); 
                break; 
            case 85: 
                System.out.println("Great job!"); 
                break; 
            default: 
                System.out.println("Keep trying!"); 
        } 
    } 
} 
 Error to Investigate: Why does this code not compile? What does the error tell you about the 
types allowed in switch expressions? How can you modify the code to make it work? 

Error: incompatible types!
Reason:The switch statement does not support double as an expression type. 

Correct code: 

public class Switch {
    public static void main(String[] args) {
        int score = 85;
        switch(score) {
            case 100:
                System.out.println("Perfect score!");
                break;
            case 85:
                System.out.println("Great job!");
                break;
            default:
                System.out.println("Keep trying!");
        }
    }
}



----------------------------------------------------------------------------------------------------------------




Snippet 26:  
public class Switch { 
    public static void main(String[] args) { 
        int number = 5; 
        switch(number) { 
            case 5: 
                System.out.println("Number is 5"); 
 
 
                break; 
            case 5: 
                System.out.println("This is another case 5"); 
                break; 
            default: 
                System.out.println("This is the default case"); 
        } 
    } 
} 
 Error to Investigate: Why does the compiler complain about duplicate case labels? What 
happens when you have two identical case labels in the same switch block?

Error : duplicate case label!
Reason: The compiler complains about duplicate case labels because it does not allow duplicate labels in the same switch.

Correct code :

public class Switch {
    public static void main(String[] args) {
        int number = 5;
        switch(number) {
            case 5:
                System.out.println("Number is 5");
                break;
            case 6:
                System.out.println("This is another case");
                break;
            default:
                System.out.println("This is the default case");
        }
    }
}


----------------------------------------------------------------------------------------------------------------
